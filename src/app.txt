import React, { useState, useEffect, useRef } from 'react';
import { BriefcaseIcon, AcademicCapIcon, BeakerIcon, ChevronDownIcon, ChevronUpIcon, ArrowTopRightOnSquareIcon, Bars3Icon, XMarkIcon, MoonIcon, SunIcon } from '@heroicons/react/24/outline';
import { EnvelopeIcon, GiftIcon, DocumentTextIcon } from '@heroicons/react/24/outline';
import './index.css';

function SocialLinks() {
  return (
    <div className="flex justify-center space-x-6 my-8">
      <a href="mailto:your.email@example.com" className="text-gray-600 hover:text-blue-500 dark:text-gray-400 dark:hover:text-blue-300">
        <EnvelopeIcon className="h-6 w-6" />
      </a>
      <a href="https://www.linkedin.com/in/yourprofile" target="_blank" rel="noopener noreferrer" className="text-gray-600 hover:text-blue-500 dark:text-gray-400 dark:hover:text-blue-300">
        <BeakerIcon className="h-6 w-6" />
      </a>
      <a href="https://github.com/yourusername" target="_blank" rel="noopener noreferrer" className="text-gray-600 hover:text-blue-500 dark:text-gray-400 dark:hover:text-blue-300">
        <GiftIcon className="h-6 w-6" />
      </a>
      <a href="/path-to-your-cv.pdf" download className="text-gray-600 hover:text-blue-500 dark:text-gray-400 dark:hover:text-blue-300">
        <DocumentTextIcon className="h-6 w-6" />
      </a>
    </div>
  );
}

function ContactForm() {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [isSubmitted, setIsSubmitted] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Here you would typically send the form data to your backend
    console.log('Form submitted:', { email, message });
    setIsSubmitted(true);
    setEmail('');
    setMessage('');
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-lg mx-auto mt-8">
      <div className="mb-4">
        <label htmlFor="email" className="block text-gray-700 dark:text-gray-300 font-bold mb-2">
          Email
        </label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
          className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline dark:bg-gray-700 dark:text-white dark:border-gray-600"
        />
      </div>
      <div className="mb-6">
        <label htmlFor="message" className="block text-gray-700 dark:text-gray-300 font-bold mb-2">
          Message
        </label>
        <textarea
          id="message"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          required
          className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline dark:bg-gray-700 dark:text-white dark:border-gray-600"
          rows="4"
        ></textarea>
      </div>
      <div className="flex items-center justify-between">
        <button
          type="submit"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
          Send Message
        </button>
      </div>
      {isSubmitted && (
        <p className="text-green-500 text-xs italic mt-2">Thank you for your message!</p>
      )}
    </form>
  );
}

function TypewriterEffect({ text }) {
  const [displayText, setDisplayText] = useState('');
  const index = useRef(0);

  useEffect(() => {
    if (index.current < text.length) {
      const timeoutId = setTimeout(() => {
        setDisplayText((prev) => prev + text[index.current]);
        index.current += 1;
      }, 100);
      return () => clearTimeout(timeoutId);
    }
  }, [displayText, text]);

  return <span>{displayText}</span>;
}
function TimelineItem({ date, title, subtitle, icon: Icon, children, isLeft }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const itemRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in');
        }
      },
      {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      }
    );

    if (itemRef.current) {
      observer.observe(itemRef.current);
    }

    return () => {
      if (itemRef.current) {
        observer.unobserve(itemRef.current);
      }
    };
  }, []);

  return (
    <div ref={itemRef} className={`mb-8 flex flex-col sm:flex-row w-full opacity-0 transition-all duration-300 ease-in-out hover:shadow-lg ${isLeft ? 'sm:flex-row-reverse' : ''}`}>
      <div className="flex items-center mb-4 sm:mb-0 sm:w-5/12">
        <div className="z-20 flex items-center justify-center bg-gray-800 dark:bg-gray-200 shadow-xl w-8 h-8 rounded-full">
          <Icon className="h-5 w-5 text-white dark:text-gray-800" />
        </div>
        <div className="ml-4 sm:hidden">
          <h3 className="font-bold text-gray-800 dark:text-gray-200 text-lg">{title}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">{date}</p>
        </div>
      </div>
      <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-xl px-6 py-4 sm:w-5/12 ${isLeft ? 'sm:mr-8' : 'sm:ml-8'} hover:scale-105 transition-transform duration-300`}>
        <div className="sm:hidden">
          <button 
            onClick={() => setIsExpanded(!isExpanded)} 
            className="flex items-center justify-between w-full"
          >
            <span className="font-semibold text-gray-700 dark:text-gray-300">{subtitle}</span>
            {isExpanded ? (
              <ChevronUpIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
            ) : (
              <ChevronDownIcon className="h-5 w-5 text-gray-500 dark:text-gray-400" />
            )}
          </button>
        </div>
        <div className={`${isExpanded ? 'block' : 'hidden'} sm:block`}>
          <h3 className="hidden sm:block mb-3 font-bold text-gray-800 dark:text-gray-200 text-xl">{title}</h3>
          <h4 className="hidden sm:block mb-3 font-semibold text-gray-700 dark:text-gray-300">{subtitle}</h4>
          <p className="hidden sm:block text-sm leading-snug tracking-wide text-gray-600 dark:text-gray-400">{date}</p>
          {children}
        </div>
      </div>
    </div>
  );
}


function Timeline({ children }) {
  const timelineRef = useRef(null);
  const [lineHeight, setLineHeight] = useState(0);

  useEffect(() => {
    const updateLineHeight = () => {
      if (timelineRef.current) {
        const height = timelineRef.current.offsetHeight;
        setLineHeight(height);
      }
    };

    updateLineHeight();
    window.addEventListener('resize', updateLineHeight);

    return () => window.removeEventListener('resize', updateLineHeight);
  }, []);

  return (
    <div ref={timelineRef} className="relative">
      <div 
        className="absolute left-4 sm:left-1/2 transform sm:-translate-x-1/2 w-0.5 bg-gray-300 transition-all duration-500 ease-in-out"
        style={{ height: `${lineHeight}px`, top: '24px' }}
      ></div>
      {children}
    </div>
  );
}

function SkillCategory({ category, skills }) {
  return (
    <div className="mb-6">
      <h3 className="text-lg font-semibold text-gray-800 mb-3">{category}</h3>
      <div className="flex flex-wrap gap-2">
        {skills.map((skill, index) => (
          <span key={index} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
            {skill}
          </span>
        ))}
      </div>
    </div>
  );
}

function Navbar({ toggleDarkMode, isDarkMode }) {
  const [isOpen, setIsOpen] = useState(false);

  const navItems = [
    { name: 'About', href: '#about' },
    { name: 'Skills', href: '#skills' },
    { name: 'Experience', href: '#experience' },
    { name: 'Projects', href: '#projects' },
  ];

  return (
    <nav className="bg-white dark:bg-gray-800 shadow-md fixed top-0 left-0 right-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex">
            <div className="flex-shrink-0 flex items-center">
              <span className="text-xl font-bold text-gray-800">Your Name</span>
            </div>
          </div>
          <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
            {navItems.map((item) => (
              <a
                key={item.name}
                href={item.href}
                className="inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700"
              >
                {item.name}
              </a>
            ))}
          </div>
          <div className="-mr-2 flex items-center sm:hidden">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500"
            >
              {isOpen ? (
                <XMarkIcon className="block h-6 w-6" aria-hidden="true" />
              ) : (
                <Bars3Icon className="block h-6 w-6" aria-hidden="true" />
              )}
            </button>
          </div>
        </div>
      </div>

      {isOpen && (
        <div className="sm:hidden">
          <div className="pt-2 pb-3 space-y-1">
            {navItems.map((item) => (
              <a
                key={item.name}
                href={item.href}
                className="block pl-3 pr-4 py-2 border-l-4 border-transparent text-base font-medium text-gray-500 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-700"
                onClick={() => setIsOpen(false)}
              >
                {item.name}
              </a>
            ))}
          </div>
        </div>
      )}
    <button
        onClick={toggleDarkMode}
        className="ml-4 p-2 rounded-full bg-gray-200 dark:bg-gray-700"
      >
        {isDarkMode ? (
          <SunIcon className="h-5 w-5 text-yellow-400" />
        ) : (
          <MoonIcon className="h-5 w-5 text-gray-700" />
        )}
      </button>
    </nav>
  );
}

function App() {
  const [isDarkMode, setIsDarkMode] = useState(() => {
    return localStorage.getItem('darkMode') === 'true'
  });

  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('darkMode', 'true');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('darkMode', 'false');
    }
  }, [isDarkMode]);

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  const skillsData = [
    {
      category: "Programming Languages",
      skills: ["Python", "JavaScript", "Java", "C++", "R"]
    },
    {
      category: "Frameworks & Libraries",
      skills: ["TensorFlow", "PyTorch", "scikit-learn", "React", "Node.js"]
    },
    {
      category: "Cloud & DevOps",
      skills: ["AWS", "Docker", "Kubernetes", "CI/CD", "Git"]
    },
    {
      category: "Databases",
      skills: ["SQL", "MongoDB", "Redis", "Cassandra"]
    },
    {
      category: "Machine Learning",
      skills: ["Deep Learning", "NLP", "Computer Vision", "Reinforcement Learning", "Data Mining"]
    }
  ];
  return (
    <div className="bg-white dark:bg-gray-900 min-h-screen">
    <Navbar />
    <div className="fixed right-4 top-20 z-50">
      <button
        onClick={toggleDarkMode}
        className="p-2 rounded-full bg-gray-200 dark:bg-gray-700"
        aria-label="Toggle dark mode"
      >
        {isDarkMode ? (
          <SunIcon className="h-5 w-5 text-yellow-400" />
        ) : (
          <MoonIcon className="h-5 w-5 text-gray-700" />
        )}
      </button>
    </div>
    <div className={`min-h-screen ${isDarkMode ? 'dark' : ''}`}>
      <div className="bg-white dark:bg-gray-900 min-h-screen">
        <Navbar toggleDarkMode={toggleDarkMode} isDarkMode={isDarkMode} />

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {/* About section */}
        <section id="about" className="px-4 py-6 sm:px-0 flex flex-col md:flex-row items-center">
        <div className="w-full md:w-1/2 mb-6 md:mb-0">
        <h2 className="text-3xl font-semibold text-gray-900 dark:text-white mb-4">About Me</h2>
        <p className="text-xl text-gray-600 dark:text-gray-300">
        <TypewriterEffect text="I'm a Machine Learning Engineer and Graduate Student passionate about AI and its applications" />
      </p>
      </div>
       <div className="w-full md:w-1/2 md:pl-6">
      <img src="https://via.placeholder.com/400x300" alt="Your Name" className="rounded-lg shadow-lg w-full" />
      </div>
</section>
        {/* Experience section */}
        <section id="experience" className="mt-10 px-4 py-6 sm:px-0">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-8">Education & Experience</h2>
          
          <Timeline>
              <TimelineItem
                date="August 2024 - Present"
                title="Master's in Computer and Information Sciences"
                subtitle="University of Florida"
                icon={AcademicCapIcon}
                isLeft={false}
              >
                <p className="text-sm mt-2">Focusing on advanced topics in Machine Learning and AI</p>
              </TimelineItem>

              <TimelineItem
                date="Sept 2022 - June 2024"
                title="Machine Learning Engineer"
                subtitle="Navan.ai"
                icon={BriefcaseIcon}
                isLeft={true}
              >
                <p className="text-sm mt-2">Developed and deployed cutting-edge ML models</p>
                <ul className="list-disc list-inside text-sm mt-2">
                  <li>Led the development of a state-of-the-art NLP model</li>
                  <li>Improved model efficiency, reducing inference time by 40%</li>
                  <li>Collaborated with cross-functional teams to integrate ML solutions</li>
                </ul>
              </TimelineItem>

              <TimelineItem
                date="Jan 2022 - April 2022"
                title="Software Developer Intern"
                subtitle="Intel"
                icon={BriefcaseIcon}
                isLeft={false}
              >
                <p className="text-sm mt-2">Developed and deployed cutting-edge ML models</p>
                <ul className="list-disc list-inside text-sm mt-2">
                  <li>Led the development of a state-of-the-art NLP model</li>
                  <li>Improved model efficiency, reducing inference time by 40%</li>
                  <li>Collaborated with cross-functional teams to integrate ML solutions</li>
                </ul>
              </TimelineItem>

              <TimelineItem
                date="Jun 2021 - Sept 2021"
                title="Machine Learning Engineer Intern"
                subtitle="Intel"
                icon={BriefcaseIcon}
                isLeft={true}
              >
                <p className="text-sm mt-2">Developed and deployed cutting-edge ML models</p>
                <ul className="list-disc list-inside text-sm mt-2">
                  <li>Led the development of a state-of-the-art NLP model</li>
                  <li>Improved model efficiency, reducing inference time by 40%</li>
                  <li>Collaborated with cross-functional teams to integrate ML solutions</li>
                </ul>
              </TimelineItem>

              <TimelineItem
                date="Jan 2021 - Nov 2021"
                title="Undergraduate Research Assistant"
                subtitle="Dayananda Sagar University"
                icon={AcademicCapIcon}
                isLeft={false}
              >
                <p className="text-sm mt-2">Developed and deployed cutting-edge ML models</p>
                <ul className="list-disc list-inside text-sm mt-2">
                  <li>Led the development of a state-of-the-art NLP model</li>
                  <li>Improved model efficiency, reducing inference time by 40%</li>
                  <li>Collaborated with cross-functional teams to integrate ML solutions</li>
                </ul>
              </TimelineItem>

              <TimelineItem
                date="Aug 2018 - Jul 2022"
                title="Bachelor of Technology in Computer Science and Engineering"
                subtitle="Dayananda Sagar University"
                icon={AcademicCapIcon}
                isLeft={true}
              >
                <p className="text-sm mt-2">Developed and deployed cutting-edge ML models</p>
                <ul className="list-disc list-inside text-sm mt-2">
                  <li>Led the development of a state-of-the-art NLP model</li>
                  <li>Improved model efficiency, reducing inference time by 40%</li>
                  <li>Collaborated with cross-functional teams to integrate ML solutions</li>
                </ul>
              </TimelineItem>

              

              {/* Add other TimelineItems here */}

            </Timeline>
        </section>

        {/* Projects section */}
        <section id="projects" className="mt-10 px-4 py-6 sm:px-0">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-6">Projects</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[1, 2, 3].map((project) => (
              <div key={project} className="bg-white dark:bg-gray-800 overflow-hidden shadow-lg rounded-lg transition-all duration-300 ease-in-out transform hover:scale-105 hover:shadow-xl">
                <img className="w-full h-48 object-cover" src={`https://picsum.photos/seed/${project}/400/200`} alt={`Project ${project}`} />
                <div className="p-6">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Project {project}</h3>
                  <p className="text-gray-600 dark:text-gray-300 mb-4">Brief description of project {project} and its key features.</p>
                  <a href="#" className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition duration-300 ease-in-out">Learn More</a>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-8 text-center">
            <a 
              href="https://github.com/abhayshas3" 
              target="_blank" 
              rel="noopener noreferrer" 
              className="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 transition duration-300 ease-in-out"
            >
              See More Projects
              <ArrowTopRightOnSquareIcon className="ml-2 -mr-1 h-5 w-5" aria-hidden="true" />
            </a>
          </div>
        </section>

         {/* Contact Form section */}
         <section id="contact" className="mt-10 px-4 py-6 sm:px-0">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-6">Get in Touch</h2>
          <ContactForm />
        </section>

        {/* Social Links section */}
        <section id="social" className="mt-10 px-4 py-6 sm:px-0">
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white mb-6">Connect with Me</h2>
          <SocialLinks />
        </section>
      </main>

      <footer className="bg-white dark:bg-gray-800 mt-12">
        <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          <p className="text-center text-gray-500 dark:text-gray-400">© 2024 Your Name. All rights reserved.</p>
        </div>
      </footer>
    </div>
    </div>
    </div>
    
  );
}


export default App;